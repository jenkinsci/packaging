#!/bin/sh
#
#     RedHat system statup script for Jenkins
#     Based on SUSE system statup script for Jenkins
#     Copyright (C) 2007  Pascal Bleser
#
#     This library is free software; you can redistribute it and/or modify it
#     under the terms of the GNU Lesser General Public License as published by
#     the Free Software Foundation; either version 2.1 of the License, or (at
#     your option) any later version.
#
#     This library is distributed in the hope that it will be useful, but
#     WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#     Lesser General Public License for more details.
#
#     You should have received a copy of the GNU Lesser General Public
#     License along with this library; if not, write to the Free Software
#     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
#     USA.
#
###############################################################################
#
# chkconfig: 35 99 01
# description: @@SUMMARY@@
#
###############################################################################
### BEGIN INIT INFO
# Provides:          @@ARTIFACTNAME@@
# Required-Start:    $local_fs $remote_fs $network $time $named
# Should-Start: $time sendmail
# Required-Stop:     $local_fs $remote_fs $network $time $named
# Should-Stop: $time sendmail
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: @@SUMMARY@@
# Description:       @@SUMMARY@@
### END INIT INFO

# Check for missing binaries (stale symlinks should not happen)
JENKINS_WAR="~~WAR~~"
test -r "$JENKINS_WAR" || {
	echo "$JENKINS_WAR not installed"
	if [ "$1" = "stop" ]; then
		exit 0
	else
		exit 5
	fi
}

# Check for existence of needed config file and read it
JENKINS_CONFIG=/etc/sysconfig/@@ARTIFACTNAME@@
test -e "$JENKINS_CONFIG" || {
	echo "$JENKINS_CONFIG not existing"
	if [ "$1" = "stop" ]; then
		exit 0
	else
		exit 6
	fi
}
test -r "$JENKINS_CONFIG" || {
	echo "$JENKINS_CONFIG not readable. Perhaps you forgot 'sudo'?"
	if [ "$1" = "stop" ]; then
		exit 0
	else
		exit 6
	fi
}

JENKINS_PID_FILE="/var/run/@@ARTIFACTNAME@@.pid"
JENKINS_LOCKFILE="/var/lock/subsys/@@ARTIFACTNAME@@"

# Source function library.
. /etc/init.d/functions

# Read config
[ -f "$JENKINS_CONFIG" ] && . "$JENKINS_CONFIG"

# Set up environment accordingly to the configuration settings
[ -n "$JENKINS_HOME" ] || {
	echo "JENKINS_HOME not configured in $JENKINS_CONFIG"
	if [ "$1" = "stop" ]; then
		exit 0
	else
		exit 6
	fi
}
[ -d "$JENKINS_HOME" ] || {
	echo "JENKINS_HOME directory does not exist: $JENKINS_HOME"
	if [ "$1" = "stop" ]; then
		exit 0
	else
		exit 1
	fi
}

# Search usable Java as /usr/bin/java might not point to minimal version required by Jenkins.
# see http://www.nabble.com/guinea-pigs-wanted-----Hudson-RPM-for-RedHat-Linux-td25673707.html
candidates="
/etc/alternatives/java
/usr/lib/jvm/java-1.8.0/bin/java
/usr/lib/jvm/jre-1.8.0/bin/java
/usr/lib/jvm/java-11.0/bin/java
/usr/lib/jvm/jre-11.0/bin/java
/usr/lib/jvm/java-11-openjdk-amd64
/usr/bin/java
"
for candidate in $candidates; do
	[ -x "$JENKINS_JAVA_CMD" ] && break
	JENKINS_JAVA_CMD="$candidate"
done

PARAMS="--logfile=/var/log/@@ARTIFACTNAME@@/@@ARTIFACTNAME@@.log --webroot=/var/cache/@@ARTIFACTNAME@@/war"
[ -n "$JENKINS_PORT" ] && PARAMS="$PARAMS --httpPort=$JENKINS_PORT"
[ -n "$JENKINS_LISTEN_ADDRESS" ] && PARAMS="$PARAMS --httpListenAddress=$JENKINS_LISTEN_ADDRESS"
[ -n "$JENKINS_HTTPS_PORT" ] && PARAMS="$PARAMS --httpsPort=$JENKINS_HTTPS_PORT"
[ -n "$JENKINS_HTTPS_KEYSTORE" ] && PARAMS="$PARAMS --httpsKeyStore='$JENKINS_HTTPS_KEYSTORE'"
[ -n "$JENKINS_HTTPS_KEYSTORE_PASSWORD" ] && PARAMS="$PARAMS --httpsKeyStorePassword='$JENKINS_HTTPS_KEYSTORE_PASSWORD'"
[ -n "$JENKINS_HTTPS_LISTEN_ADDRESS" ] && PARAMS="$PARAMS --httpsListenAddress=$JENKINS_HTTPS_LISTEN_ADDRESS"
[ -n "$JENKINS_HTTP2_PORT" ] && PARAMS="$PARAMS --http2Port=$JENKINS_HTTP2_PORT"
[ -n "$JENKINS_HTTP2_LISTEN_ADDRESS" ] && PARAMS="$PARAMS --http2ListenAddress=$JENKINS_HTTP2_LISTEN_ADDRESS"
[ -n "$JENKINS_DEBUG_LEVEL" ] && PARAMS="$PARAMS --debug=$JENKINS_DEBUG_LEVEL"
[ -n "$JENKINS_HANDLER_STARTUP" ] && PARAMS="$PARAMS --handlerCountStartup=$JENKINS_HANDLER_STARTUP"
[ -n "$JENKINS_HANDLER_MAX" ] && PARAMS="$PARAMS --handlerCountMax=$JENKINS_HANDLER_MAX"
[ -n "$JENKINS_HANDLER_IDLE" ] && PARAMS="$PARAMS --handlerCountMaxIdle=$JENKINS_HANDLER_IDLE"
[ -n "$JENKINS_EXTRA_LIB_FOLDER" ] && PARAMS="$PARAMS --extraLibFolder='$JENKINS_EXTRA_LIB_FOLDER'"
[ -n "$JENKINS_ARGS" ] && PARAMS="$PARAMS $JENKINS_ARGS"

if [ "$JENKINS_ENABLE_ACCESS_LOG" = "yes" ]; then
	PARAMS="$PARAMS --accessLoggerClassName=winstone.accesslog.SimpleAccessLogger --simpleAccessLogger.format=combined --simpleAccessLogger.file=/var/log/@@ARTIFACTNAME@@/access_log"
fi

RETVAL=0

is_running() {
	: >"$JENKINS_PID_FILE" # just in case we fail to find it
	# get PID
	/bin/ps hww -u "$JENKINS_USER" -o pid,cmd | while read -r pid cmd; do
		echo "$cmd" | grep "$JENKINS_WAR" >/dev/null
		[ $? = 0 ] || continue
		# found a PID
		echo "$pid" >"$JENKINS_PID_FILE"
	done
	if [ -s "$JENKINS_PID_FILE" ]; then
		return 0
	else
		return 1
	fi
}

case "$1" in
start)
	echo -n "Starting @@PRODUCTNAME@@ "
	daemon --user "$JENKINS_USER" --pidfile "$JENKINS_PID_FILE" "$JENKINS_JAVA_CMD" $JENKINS_JAVA_OPTIONS "-DJENKINS_HOME=$JENKINS_HOME" -jar "$JENKINS_WAR" $PARAMS &
	RETVAL=$?
	if [ $RETVAL = 0 ]; then
		attempt=1
		is_started=false
		while [ $attempt -le 30 ]; do
			if is_running; then
				is_started=true
				break
			fi
			sleep 1
			attempt=$((attempt + 1))
		done
		if $is_started; then
			success
			touch "$JENKINS_LOCKFILE"
		else
			failure
		fi
	else
		failure
	fi
	echo
	;;
stop)
	echo -n "Shutting down @@PRODUCTNAME@@ "
	killproc @@ARTIFACTNAME@@
	rm -f $JENKINS_LOCKFILE
	RETVAL=$?
	echo
	;;
try-restart | condrestart)
	if test "$1" = "condrestart"; then
		echo "${attn} Use try-restart ${done}(LSB)${attn} rather than condrestart ${warn}(RH)${norm}"
	fi
	$0 status
	if test $? = 0; then
		$0 restart
	else
		: # Not running is not a failure.
	fi
	;;
restart)
	$0 stop
	$0 start
	;;
force-reload)
	echo -n "Reload service @@PRODUCTNAME@@ "
	$0 try-restart
	;;
reload)
	$0 restart
	;;
status)
	status @@ARTIFACTNAME@@
	RETVAL=$?
	;;
probe)
	## Optional: Probe for the necessity of a reload, print out the
	## argument to this init script which is required for a reload.
	## Note: probe is not (yet) part of LSB (as of 1.9)

	test "$JENKINS_CONFIG" -nt "$JENKINS_PID_FILE" && echo reload
	;;
*)
	echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload|probe}"
	exit 1
	;;
esac
exit $RETVAL
